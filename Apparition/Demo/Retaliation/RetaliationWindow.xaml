using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;

namespace Apparition.Retaliation
{
    public partial class RetaliationWindow : Window
    {
        private List<string> _textBuffer = new List<string>(); // Holds all lines of text
        private const int MaxVisibleLines = 30; // Adjust as needed for the size of your RichTextBox

        public RetaliationWindow()
        {
            InitializeComponent();
            InitializeBufferAndDisplay(); // Initial population of the buffer and display
        }

        private void InitializeBufferAndDisplay()
        {
            // Populate the buffer with initial data
            // For example, load from a file or any other source
            // Example: _textBuffer.Add("Sample line");

            // Display the last 'MaxVisibleLines' from the buffer
            DisplayLastLines();
        }

        private void TerminalOutput_ScrollChanged(object sender, ScrollChangedEventArgs e)
        {
            if (!(sender is ScrollViewer scrollViewer)) return;

            if (e.VerticalChange < 0) // Scrolling up
            {
                DisplayPreviousLines();
            }
            else if (e.VerticalChange > 0) // Scrolling down
            {
                DisplayNextLines();
            }
        }

        private void DisplayPreviousLines()
        {
            // Logic to display previous lines when scrolling up
            var firstVisibleLineIndex = _textBuffer.IndexOf(TerminalOutput.Document.Blocks.FirstBlock?.ToString());
            if (firstVisibleLineIndex > 0)
            {
                TerminalOutput.Document.Blocks.InsertBefore(TerminalOutput.Document.Blocks.FirstBlock, new Paragraph(new Run(_textBuffer[firstVisibleLineIndex - 1])));
                if (TerminalOutput.Document.Blocks.Count > MaxVisibleLines)
                {
                    TerminalOutput.Document.Blocks.Remove(TerminalOutput.Document.Blocks.LastBlock);
                }
            }
        }

        private void DisplayNextLines()
        {
            // Logic to display next lines when scrolling down
            var lastVisibleLineIndex = _textBuffer.IndexOf(TerminalOutput.Document.Blocks.LastBlock?.ToString());
            if (lastVisibleLineIndex < _textBuffer.Count - 1)
            {
                TerminalOutput.Document.Blocks.Add(new Paragraph(new Run(_textBuffer[lastVisibleLineIndex + 1])));
                if (TerminalOutput.Document.Blocks.Count > MaxVisibleLines)
                {
                    TerminalOutput.Document.Blocks.Remove(TerminalOutput.Document.Blocks.FirstBlock);
                }
            }
        }

        private void DisplayLastLines()
        {
            TerminalOutput.Document.Blocks.Clear();
            foreach (var line in _textBuffer.Skip(Math.Max(0, _textBuffer.Count - MaxVisibleLines)))
            {
                TerminalOutput.Document.Blocks.Add(new Paragraph(new Run(line)));
            }
        }
    }
}
